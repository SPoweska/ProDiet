@using ProDiet.Pages.Dishes
@using ProDiet.Services
@using ProDiet.Data.Enums
@using ProDiet.Models
@inject IDishStoresService iDishStoresService;
@inject IProductStoresService iProductStoresService;

@*Edycja/tworzenie dania w środku posiłku*@

<EditForm Model="@_dish" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="_dish.DishName"
                          For="@(() => _dish.DishName)"
                          Immediate="true"
                          Label="Nazwa dania"/>
            
            <h7>Składniki</h7>
            <MudCard>                                                                    
                <MudFab
                    Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                    @onclick="@(() => _dish.UsedProducts.Add(new UsedProduct()))" >
                    Dodaj składnik
                </MudFab>                                
                <MudCard>                                    
                    @for (var i = 0; i < _dish.UsedProducts.Count; i++)
                    {
                        var index = i;
                        var usedProduct = _dish.UsedProducts[i];
            
                        <CascadingValue Value="usedProduct">
                        <UsedProductComponent productList="_productsList"></UsedProductComponent>
                        </CascadingValue>

                        <MudFab
                            Size="Size.Small"
                            StartIcon="@Icons.Filled.Delete"
                            Color="Color.Error"
                            @onclick="@(() => _dish.UsedProducts.RemoveAt(index))">
                            Skasuj
                        </MudFab>
                    }
                </MudCard>
            </MudCard>


            <MudTextField @bind-Value="_dish.Carbohydrates"
                          For="@(() => _dish.Carbohydrates)"
                          Immediate="true"
                          Label="Węglowodany"/>
            <MudTextField @bind-Value="_dish.Calories"
                          For="@(() => _dish.Calories)"
                          Immediate="true"
                          Label="Kalorie"/>

            <MudTextField @bind-Value="_dish.Fats"
                          For="@(() => _dish.Fats)"
                          Immediate="true"
                          Label="Tłuszcz"/>

            <MudTextField @bind-Value="_dish.Proteins"
                          For="@(() => _dish.Proteins)"
                          Immediate="true"
                          Label="Białko"/>

            <MudTextField @bind-Value="_dish.Fiber"
                          For="@(() => _dish.Fiber)"
                          Immediate="true"
                          Label="Błonnik"/>
            <MudTextField @bind-Value="_dish.Servings"
                          For="@(() => _dish.Servings)"
                          Immediate="true"
                          Label="Liczba porcji"/>
            <MudTextField @bind-Value="_dish.PreparationMinutes"
                          For="@(() => _dish.PreparationMinutes)"
                          Immediate="true"
                          Label="Czas przygotowania w minutach"/>
            <MudTextField @bind-Value="_dish.Recipe"
                          For="@(() => _dish.Recipe)"
                          Immediate="true"
                          Label="Wskazówki odnośnie przygotowania"/>
            <MudCard Outlined="true">
                <MudSelect Label="Typ posiłku" @bind-Value="_dish.MealType">
                    @foreach (var mealType in Enum.GetValues(typeof(MealType)))
                    {
                        <MudSelectItem T="string" Value="@mealType.ToString()">@mealType</MudSelectItem>
                    }
                </MudSelect>
            </MudCard>
        </MudCardContent>
    </MudCard>
    <MudCard>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="demo-form-button">Zapisz danie</MudButton>
    </MudCard> 
</EditForm>

@code {
    [CascadingParameter]
    public ProDiet.Models.Dish _dish { get; set; }
    private List<Product> _productsList;
    public ProDiet.Models.Dish _dishbeforeEdit { get; set; }

    [Parameter]
    public string userId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _dishbeforeEdit = _dish;
        _productsList = await iProductStoresService.GetAllProducts();
        await base.OnInitializedAsync();
    }

    private async Task OnValidSubmit()
    {
        if (_dishbeforeEdit != _dish)
        {
            _dish.CreatedBy = userId;
            _dish.CreatedAt = DateTime.Now;
            await iDishStoresService.AddDish(_dish);

        }


    }

}
