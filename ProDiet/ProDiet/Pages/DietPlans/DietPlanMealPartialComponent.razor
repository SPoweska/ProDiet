@using ProDiet.Models.DietPlan
@using Microsoft.AspNetCore.Components
@using ProDiet.Data.Enums
@using ProDiet.Models
@using ProDiet.Pages.DietPlans.Modals
@using ProDiet.Services
@inject IDishStoresService iDishStoresService;
@inject IDietPlanStoresService iDietPlanStoresService;
@inject IDialogService DialogService

@*Edycja posiłku*@

<MudCard>
    
    <EditForm Model="@_dayMeal">
    <DataAnnotationsValidator/>
    <MudCardContent>
        <MudCard Outlined="true">
            <MudSelect Label="Nazwa posiłku" @bind-Value="_dayMeal.Name">
                @foreach (var mealType in mealList)
                {
                    <MudSelectItem T="string" Value="@mealType">@mealType</MudSelectItem>
                }
            </MudSelect>
            <MudCard Outlined="true">
                @if (_dayMeal.MealDish?.Dish != null)
                {
                            <MudTextField @bind-Value="_dayMeal.MealDish.Dish.DishName"
                                    For="@(() => _dayMeal.MealDish.Dish.DishName)"
                                    Disabled="true"
                                    Immediate="true"
                                    Label="Węglowodany"/>
                            <MudTextField @bind-Value="_dayMeal.MealDish.Carbohydrates"
                                  For="@(() => _dayMeal.MealDish.Carbohydrates)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Węglowodany"/>
                            <MudTextField @bind-Value="_dayMeal.MealDish.Calories"
                                  For="@(() => _dayMeal.MealDish.Calories)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Kalorie"/>

                            <MudTextField @bind-Value="_dayMeal.MealDish.Fats"
                                  For="@(() => _dayMeal.MealDish.Fats)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Tłuszcz"/>

                            <MudTextField @bind-Value="_dayMeal.MealDish.Proteins"
                                  For="@(() => _dayMeal.MealDish.Proteins)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Białko"/>

                            <MudTextField @bind-Value="_dayMeal.MealDish.Fiber"
                                  For="@(() => _dayMeal.MealDish.Fiber)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Błonnik"/>
                            <MudTextField @bind-Value="_dayMeal.MealDish.Dish.Servings"
                                  For="@(() => _dayMeal.MealDish.Dish.Servings)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Liczba porcji"/>
                            <MudTextField @bind-Value="_dayMeal.MealDish.Dish.PreparationMinutes"
                                  For="@(() => _dayMeal.MealDish.Dish.PreparationMinutes)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Czas przygotowania w minutach"/>
                            <MudTextField @bind-Value="_dayMeal.MealDish.Dish.Recipe"
                                  For="@(() => _dayMeal.MealDish.Dish.Recipe)"
                                  Disabled="true"
                                  Immediate="true"
                                  Label="Wskazówki odnośnie przygotowania"/>
                            <MudCard Outlined="true">
                                <MudSelect Disabled="true" Label="Typ posiłku" @bind-Value="_dayMeal.MealDish.Dish.MealType">
                                    @foreach (var mealType in Enum.GetValues(typeof(MealType)))
                                    {
                                <MudSelectItem T="string" Value="@mealType.ToString()">@mealType</MudSelectItem>
                                    }
                        </MudSelect>
                    </MudCard>
                }
                else
                {
                    <h1>Wybierz danie z listy lub utwórz nowe</h1>
                    <MudButton Color="Color.Success" @onclick="()=>OpenDialogSearchDish(userId, selectedDish)">Chcę wybrać i edytowac jedno z dostępnych dań </MudButton>
                    <MudButton Color="Color.Primary" @onclick="()=>OpenDialogNewDish(userId, selectedDish)">Chcę utworzyć nowe danie </MudButton>
                }
                
                
            </MudCard>
        </MudCard>
    </MudCardContent>
    </EditForm>
</MudCard>

@code 
{

    [CascadingParameter]
    public DayMeal _dayMeal { get; set; }

    private List<string> mealList = Enum.GetNames(typeof(MealType)).Cast<string>().ToList();

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public Dish selectedDish { get; set; } = new Dish();
    public Dish dish { get; set; }
    public MealDish mealDish { get; set; }

    protected override void OnInitialized()
    {

        base.OnInitialized();
    }

    private async Task OpenDialogSearchDish(string userId, Dish selectedDish )
    {
        mealDish = new MealDish();
        var parameters = new DialogParameters { ["userId"] =userId, ["_dish"]=selectedDish, ["mealDish"]= mealDish, ["MealId"] =_dayMeal.MealId };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog=DialogService.Show <EditExistingDishDialog> ("Edytuj istniejące danie",parameters, closeOnEscapeKey);
        var resultDishId = await dialog.Result;
        
        if (!resultDishId.Cancelled)
        {
            
            selectedDish = await iDishStoresService.GetDish((int)resultDishId.Data);
            if (selectedDish.DishId != 0)
            {
                dish = selectedDish;
                await this.InvokeAsync(StateHasChanged);
                await ReloadData();
                mealDish.DishId = dish.DishId;
                _dayMeal.MealDish=mealDish;
                await iDietPlanStoresService.UpdateDayMeal(_dayMeal);

            }
        }

    }

    private async Task OpenDialogNewDish(string userId, Dish selectedDish  )
    {
        var parameters = new DialogParameters {["userId"] =userId  ,["_dish"]=selectedDish};
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialogBody=DialogService.Show<CreateNewDishDialog>("Dodaj nowy pomiar ciała",parameters, closeOnEscapeKey);
        var resultDishId = await dialogBody.Result;
        if (!resultDishId.Cancelled)
        {
            mealDish = new MealDish();
            selectedDish = await iDishStoresService.GetDish((int)resultDishId.Data);
            if (selectedDish.DishId != 0)
            {
                dish = selectedDish;
                await this.InvokeAsync(StateHasChanged);
                await ReloadData();
                mealDish.DishId = dish.DishId;
                _dayMeal.MealDish=mealDish;
                _dayMeal.CreatedAt=DateTime.Now;
                _dayMeal.CreatedBy = userId;
                await iDietPlanStoresService.UpdateDayMeal(_dayMeal);
            }
            
        }

    }

    public async Task ReloadData()
    {
        await this.InvokeAsync(StateHasChanged);
    }


    protected override async Task OnInitializedAsync()
    {
        await ReloadData();
        await base.OnInitializedAsync();
    }


}