@using ProDiet.Models.DietPlan
@using Microsoft.AspNetCore.Components
@using ProDiet.Data.Enums
@using ProDiet.Models
@using ProDiet.Pages.DietPlans.Modals
@using ProDiet.Services
@inject IDishStoresService iDishStoresService;
@inject IDialogService DialogService

@*Edycja posiłku*@

<MudCard>
    
    <EditForm Model="@_dayMeal">
    <DataAnnotationsValidator/>
    <MudCardContent>
        <MudCard Outlined="true">
            <MudSelect Label="Nazwa posiłku" @bind-Value="_dayMeal.Name">
                @foreach (var mealType in mealList)
                {
                    <MudSelectItem T="string" Value="@mealType">@mealType</MudSelectItem>
                }
            </MudSelect>
            <MudCard Outlined="true">
                @if (selectedDish.DishId == 0)
                {
                    <h1>Wybierz danie z listy lub utwórz nowe</h1>
                    <MudButton Color="Color.Success" @onclick="()=>OpenDialogSearchDish(userId, selectedDish)">Chcę wybrać i edytowac jedno z dostępnych dań </MudButton>
                    <MudButton Color="Color.Primary" @onclick="()=>OpenDialogNewDish(userId, selectedDish)">Chcę utworzyć nowe danie </MudButton>
                }
                else
                {


                }
            </MudCard>
        </MudCard>
    </MudCardContent>
    </EditForm>
</MudCard>

@code 
{

    [CascadingParameter]
    public DayMeal _dayMeal { get; set; }
    private List<string> mealList = Enum.GetNames(typeof(MealType)).Cast<string>().ToList();
    [Parameter]
    public string userId { get; set; }    
    public Dish selectedDish { get; set; } = new Dish(){DishId = 0};
    

    private async Task OpenDialogSearchDish(string userId, Dish selectedDish )
    {
        var parameters = new DialogParameters { ["userId"] =userId, ["_dish"]=selectedDish};
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog=DialogService.Show <EditExistingDishDialog> ("Edytuj istniejące danie",parameters, closeOnEscapeKey);
        var resultDishId = await dialog.Result;
        if (!resultDishId.Cancelled)
        {
            
            selectedDish = await iDishStoresService.GetDish((int)resultDishId.Data);
            await this.InvokeAsync(StateHasChanged);
        }

    }

    private async Task OpenDialogNewDish(string userId, Dish selectedDish  )
    {
        var parameters = new DialogParameters {["userId"] =userId  ,["_dish"]=selectedDish};
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialogBody=DialogService.Show<CreateNewDishDialog>("Dodaj nowy pomiar ciała",parameters, closeOnEscapeKey);
        var resultDishId = await dialogBody.Result;
        if (!resultDishId.Cancelled)
        {
            selectedDish = await iDishStoresService.GetDish((int)resultDishId.Data);
            await this.InvokeAsync(StateHasChanged);
        }

    }


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }


}