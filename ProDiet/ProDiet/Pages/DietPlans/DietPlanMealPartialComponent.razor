@using ProDiet.Models.DietPlan
@using Microsoft.AspNetCore.Components
@using ProDiet.Data.Enums
@using ProDiet.Models
@using ProDiet.Pages.DietPlans.Modals
@using ProDiet.Services
@inject IDishStoresService iDishStoresService;
@inject IDietPlanStoresService iDietPlanStoresService;
@inject IDialogService DialogService

@*Edycja posiłku*@


<div class="row-cols-auto">
<EditForm Model="@_dayMeal">
    <DataAnnotationsValidator/>
    <MudCardContent>
        <MudCard >
            <div class="row">
                <div class="col-3">
                    <MudSelect Label="Nazwa posiłku" ValueChanged="(string s) => MealNameChanged(s)" Value="_dayMeal.Name">
                        @foreach (var mealType in mealList)
                        {
                            <MudSelectItem T="string" Value="@mealType">@mealType</MudSelectItem>
                        }
                    </MudSelect>
                </div>
            </div>
            <MudCard  Outlined="true">
            
                @if (_dayMeal.MealDish?.Dish != null)
                {
                    <div @onclick="() => OpenDialogSearchDish(userId,_dayMeal.MealDish.Dish)">
                        <div class="row">
                            <div class="col-3">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Dish.DishName"
                                              For="@(() => _dayMeal.MealDish.Dish.DishName)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Nazwa dania"/>
                            </div>
                        </div>

                        <div class="row col-10">
                            <div class="col-2">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Calories"
                                              For="@(() => _dayMeal.MealDish.Calories)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Kalorie"/>
                            </div>
                            <div class="col-2">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Carbohydrates"
                                              For="@(() => _dayMeal.MealDish.Carbohydrates)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Węglowodany(g)"/>
                            </div>
                            <div class="col-2">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Fats"
                                              For="@(() => _dayMeal.MealDish.Fats)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Tłuszcz(g)"/>
                            </div>

                            <div class="col-2">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Proteins"
                                              For="@(() => _dayMeal.MealDish.Proteins)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Białko(g)"/>
                            </div>

                            <div class="col-2">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Fiber"
                                              For="@(() => _dayMeal.MealDish.Fiber)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Błonnik(g)"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-2">

                                <MudTextField @bind-Value="_dayMeal.MealDish.Dish.Servings"
                                              For="@(() => _dayMeal.MealDish.Dish.Servings)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Liczba porcji"/>
                            </div>
                            <div class="col-2">

                                <MudTextField @bind-Value="_dayMeal.MealDish.Dish.PreparationMinutes"
                                              For="@(() => _dayMeal.MealDish.Dish.PreparationMinutes)"
                                              Disabled="true"
                                              Immediate="true"
                                              Label="Czas przygotowania"/>
                            </div>
                        </div>
                        <div class="row col-10">
                            <div class="col-10">
                                <MudTextField @bind-Value="_dayMeal.MealDish.Dish.Recipe"
                                              For="@(() => _dayMeal.MealDish.Dish.Recipe)"
                                              Disabled="true"
                                              Immediate="true"
                                              Lines="5"
                                              Label="Wskazówki odnośnie przygotowania"/>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <MudButton Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" @onclick="() => OpenDialogSearchDish(userId, selectedDish)">Dodaj danie </MudButton>
                }


            </MudCard>
        </MudCard>
    </MudCardContent>
</EditForm>
</div>


@code 
{

    [CascadingParameter]
    public DayMeal _dayMeal { get; set; }

    private List<string> mealList = Enum.GetNames(typeof(MealType)).Cast<string>().ToList();

    [Parameter]
    public string userId { get; set; }

    [Parameter]
    public Dish selectedDish { get; set; } = new Dish();
    public Dish dish { get; set; }
    public MealDish mealDish { get; set; }

    

    private async Task MealNameChanged(string s)
    {
        _dayMeal.Name = s;
        await iDietPlanStoresService.UpdateDayMeal(_dayMeal);

    }

    private async Task OpenDialogSearchDish(string userId, Dish selectedDish )
    {
        //await iDietPlanStoresService.UpdateDayMeal(_dayMeal);
        mealDish = new MealDish();
        var parameters = new DialogParameters { ["userId"] =userId, ["_dish"]=selectedDish, ["mealDish"]= mealDish, ["MealId"] =_dayMeal.MealId };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog=DialogService.Show <EditExistingDishDialog> ("Edytuj istniejące danie",parameters, closeOnEscapeKey);
        var resultDishId = await dialog.Result;
        
        if (!resultDishId.Cancelled)
        {
            
            selectedDish = await iDishStoresService.GetDish((int)resultDishId.Data);
            if (selectedDish.DishId != 0)
            {
                dish = selectedDish;
                await this.InvokeAsync(StateHasChanged);
                await ReloadData();
                mealDish.DishId = dish.DishId;
                _dayMeal.MealDish=mealDish;
                await iDietPlanStoresService.UpdateDayMeal(_dayMeal);
                await ReloadData();

            }
        }

    }



    public async Task ReloadData()
    {
        await this.InvokeAsync(StateHasChanged);
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await ReloadData();

    }


}