@using Microsoft.AspNetCore.Identity
@using ProDiet.Models
@using ProDiet.Data.Enums
@using ProDiet.Data.Enums
@using ProDiet.Pages.Dishes
@using ProDiet.Services
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components
@using ProDiet.Data.Configuration
@using ProDiet.Migrations
@using ProDiet.Models
@using ProDiet.Models.DietPlan
@using Dish = ProDiet.Models.Dish
@inject UserManager<IdentityUser> userManager;
@inject IDishStoresService iDishStoresService;
@inject IProductStoresService iProductStoresService;
@inject IHttpContextAccessor httpContextAccessor;
@inject IDietPlanStoresService iDietPlanStoresService;
@inject NavigationManager navigationManager;



<MudDialog  DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 800px; max-width: 800px; overflow-y: scroll; overflow-x: scroll">

            <MudExpansionPanel Style="background-color: grey" Text="Wybierz jedno z istniejących dań" MaxHeight="150">
                <MudCheckBox Size="Size.Small" Color="Color.Primary" CheckedChanged="(bool i) => OnlyMyDishesCheck(i)" Checked="onlyMyDishes" Label="Wyświetlaj dodane przeze mnie dania"></MudCheckBox>
                <MudSelect
                    T="int"
                    ValueChanged="(int i) => OnDishSelected(i)"
                    Label="Wybierz danie z listy"
                    Value="selectedDish.DishId">
                    @foreach (var dish in dishesList)
                    {
                        <MudSelectItem T="int" Value="@dish.DishId">@dish.DishName</MudSelectItem>
                    }
                </MudSelect>
            </MudExpansionPanel>
            @if(selectedDish.DishId != null)
            {
                <EditForm Model="@_dish" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator/>
                    <MudCard @onclick="OnProductsListChanged">
                        <MudCardContent>
                            <MudTextField @bind-Value="_dish.DishName"
                                          For="@(() => _dish.DishName)"
                                          Immediate="true"
                                          Label="Nazwa dania"/>
                    
                            <p></p>
                            <h9>Podsumowanie dania</h9>
                            <table class="table table-bordered">
                                <thead>
                                <tr>
                                    <th>Kaloryka</th>
                                    <th>Węglowodany(g)</th>
                                    <th>Tłuszcz(g)</th>
                                    <th>Białko(g)</th>
                                    <th>Błonnik(g)</th>
                                
                                </tr>
                                </thead>
                                <tbody>
                                <tr>
                                    <td>@_dish.Calories</td>
                                    <td>@_dish.Carbohydrates</td>
                                    <td>@_dish.Fats</td>
                                    <td>@_dish.Proteins</td>
                                    <td>@_dish.Fiber</td>
                                </tr>
                                </tbody>
                            </table>

                            <h9>Lista składników:</h9>
                            <MudCard>
                                <MudButton
                                    Size="Size.Small" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                                    @onclick="@(() => _dish.UsedProducts.Add(new UsedProduct()))">
                                    Dodaj składnik
                                </MudButton>
                                <MudCard>
                                    @for (var i = 0; i < _dish.UsedProducts.Count; i++)
                                    {
                                        var index = i;
                                        var usedProduct = _dish.UsedProducts[i];

                                        <CascadingValue Value="usedProduct">
                                            <UsedProductComponent productList="_productsList" OnDataChange="@OnProductsListChanged"></UsedProductComponent>
                                        </CascadingValue>

                                        <MudFab
                                            Size="Size.Small"
                                            StartIcon="@Icons.Filled.Delete"
                                            Color="Color.Error"
                                            @onclick="@(() => _dish.UsedProducts.RemoveAt(index))">
                                            Skasuj
                                        </MudFab>
                                    }
                                </MudCard>
                            </MudCard>

                            <div class="row">
                                <div class="col-3">
                                    <MudTextField @bind-Value="_dish.Servings"
                                                  For="@(() => _dish.Servings)"
                                                  Immediate="true"
                                                  Label="Liczba porcji"/>
                                </div>
                                <div class="col-3">

                                    <MudTextField @bind-Value="_dish.PreparationMinutes"
                                                  For="@(() => _dish.PreparationMinutes)"
                                                  Immediate="true"
                                                  Label="Czas przygotowania(minut)"/>
                                </div>
                            </div>
                            <MudTextField @bind-Value="_dish.Recipe"
                                          For="@(() => _dish.Recipe)"
                                          Immediate="true"
                                          Lines="5"
                                          Label="Wskazówki odnośnie przygotowania"/>
                            <MudCard Outlined="true">
                                <MudSelect Label="Typ posiłku" @bind-Value="_dish.MealType">
                                    @foreach (var mealType in Enum.GetValues(typeof(MealType)))
                                    {
                                        <MudSelectItem T="string" Value="@mealType.ToString()">@mealType</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudCard>
                        </MudCardContent>
                    </MudCard>
                    <MudCard>
                        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Anuluj</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Zapisz</MudButton>
                    </MudCard>
                </EditForm>
            }
            else
            {
                <MudCard Outlined="true">
                    <h3>Wybierz produkt z listy</h3>
                    <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Anuluj</MudButton>
                </MudCard>
            }
        </MudContainer>
    </DialogContent>
</MudDialog>



@code {
    [Parameter]
    public ProDiet.Models.Dish _dish { get; set; }
    [Parameter]
    public MealDish mealDish { get; set; }

    private List<Product> _productsList;

    [Parameter]
    public string userId { get; set; }
    [Parameter]
    public int MealId { get; set; }

    public bool onlyMyDishes = false;

    public List<Dish> dishesList { get; set; } = new List<Dish>();
    public List<Dish> allDishesList { get; set; } = new List<Dish>();
    public List<Dish> userDishesList { get; set; } = new List<Dish>();
    public Dish selectedDish { get; set; } = new Dish(){DishId = 0};
    public int mealDishId { get; set; }
    


    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    [CascadingParameter]
    MudDialogInstance mudDialog { get; set; }


    void Submit()
    {

        mudDialog.Close(DialogResult.Ok(_dish.DishId));
    } 

    void Cancel() => mudDialog.Cancel();





    private void OnProductsListChanged()
    {
        _dish.Proteins = 0;
        _dish.Carbohydrates = 0;
        _dish.Fats = 0;
        _dish.Calories = 0;
        _dish.Fiber = 0;
        if (_dish.UsedProducts.Count>1)
        {
            _dish.Calories = MathF.Round(_dish.UsedProducts.Sum(x => x.Calories),2, MidpointRounding.AwayFromZero);
            _dish.Proteins = MathF.Round(_dish.UsedProducts.Sum(x => x.Proteins),2, MidpointRounding.AwayFromZero);
            _dish.Carbohydrates = MathF.Round(_dish.UsedProducts.Sum(x => x.Carbohydrates),2, MidpointRounding.AwayFromZero);
            _dish.Fats = MathF.Round(_dish.UsedProducts.Sum(x => x.Fats),2, MidpointRounding.AwayFromZero);
            if (_dish.UsedProducts.Sum(x => x.Fiber)!=null)
            {
                _dish.Fiber = 0;
            }
            else
            {
                _dish.Fiber = _dish.UsedProducts.Sum(x => x.Fiber);                

            }
        }
        

        
        
    }

    protected override async Task OnInitializedAsync()
    {
        _dish = new ProDiet.Models.Dish();
        _productsList = await iProductStoresService.GetAllProducts();
        allDishesList = await iDishStoresService.GetAllDishes();
        userDishesList = await iDishStoresService.GetAllUserDishes(userId);
        dishesList = allDishesList;

        await base.OnInitializedAsync();
    }

    //private async Task<Product> SelectedProductDataLoad(int selectedProductId)
    //{
    //    Product selectedProduct = await iProductStoresService.GetProductData(selectedProductId);
    //    return selectedProduct;
    //}

    private async Task OnValidSubmit()
    {
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        if (_dish != selectedDish)
        {
            _dish.DishId = 0;
            _dish.CreatedBy = id;
            _dish.CreatedAt = DateTime.Now;
            _dish.DishId = await iDishStoresService.AddDishReturnId(_dish);
        }
        mealDish.DishId = _dish.DishId;
        mealDish.Calories = _dish.Calories;
        mealDish.Proteins = _dish.Proteins;
        mealDish.Fats = _dish.Fats;
        mealDish.Carbohydrates = _dish.Carbohydrates;
        mealDish.Fiber = _dish.Fiber;
        mealDish.CreatedAt=DateTime.Now;
        mealDish.CreatedBy = id;
        mealDish.MealId = MealId;
        mealDishId = await iDietPlanStoresService.UpdateMealDish(mealDish);

        Submit();

    }



    public async Task OnlyMyDishesCheck(bool i)
    {
        onlyMyDishes = i;
        if (onlyMyDishes == true)
        {
            dishesList = userDishesList;
        }
        else
        {
            dishesList = allDishesList;
        }
        await this.InvokeAsync(StateHasChanged);

    }
    public async Task OnDishSelected(int i)
    {
        selectedDish = await iDishStoresService.GetDish(i);
        _dish = selectedDish;
        await this.InvokeAsync(StateHasChanged);
    }

}