@page "/patientdetails/{PatientId:int}/EditDietPlan/{DietPlanId:int}/EditDietDay/{DietPlanDayId:int}"

@inject UserManager<IdentityUser> userManager
@inject IDietPlanStoresService iDietPlanStoresService
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Identity
@using ProDiet.Data.Enums
@using ProDiet.Models.DietPlan
@using ProDiet.Services
@using Microsoft.AspNetCore.Components


<div class="row">
    
    <div class="col-8">
        <div id="border">
        @*Edycja dnia jadłospisu-> (dodawanie posiłków) DietPlanMealPartial*@

        @if (_dietPlanDay == null)
        {
            <p><em>Nie możesz wyświetlić tego planu dietetycznego</em></p>
        }
        else
        {
            <MudItem >
                <h3>Edycja dnia jadłospisu: @_dietPlanDay.DietPlanDayDate</h3>
                <EditForm Model="@_dietPlanDay" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator/>
                    <MudCard>
                        <p></p>
                        <h5>Podsumowanie dnia:</h5>
                        <div class="row-cols-6">
                            <div class="col-6">
                                <table class="table table-bordered">
                                    <thead>
                                    <tr>
                                        <th scope="col">Kaloryka(kcal)</th>
                                        <th scope="col">Węglowodany(g)</th>
                                        <th scope="col">Tłuszcz(g)</th>
                                        <th scope="col">Białko(g)</th>
                                        <th scope="col">Błonnik(g)</th>

                                    </tr>
                                    </thead>
                                    <tbody>
                                    <tr>
                                        <td>@_dietPlanDay.Calories z @_dietPlan.DailyCalories</td>
                                        <td>@_dietPlanDay.Carbohydrates z @_dietPlan.DailyCarbohydrates</td>
                                        <td>@_dietPlanDay.Fats z @_dietPlan.DailyFats</td>
                                        <td>@_dietPlanDay.Proteins z @_dietPlan.DailyProteins</td>
                                        <td>@_dietPlanDay.Fiber z @_dietPlan.DailyFiber</td>
                                    </tr>
                                    </tbody>
                                </table>
                            </div>

                        </div>
                        <MudCardContent>
                            <MudCard>
                                <MudCard>

                                    <MudCard>
                                        @for (var i = 0; i < _dietPlanDay.DietPlanDayMeals.Count; i++)
                                        {
                                            var index = i;
                                            var dayMeal = _dietPlanDay.DietPlanDayMeals[i];
                                            <div id="borderThin">
                                                <div class="row">
                                                    <div class="col-10"></div>
                                                    <div class="col-2">
                                                        <MudButton
                                                            Size="Size.Small"
                                                            EndIcon="@Icons.Filled.Delete"
                                                            Variant="Variant.Filled"
                                                            Color="Color.Error"
                                                            @onclick="@(() => _dietPlanDay.DietPlanDayMeals.RemoveAt(index))">
                                                            Skasuj posiłek
                                                        </MudButton>

                                                    </div>
                                                </div>

                                                <MudCard Outlined="true">
                                                    <span>
                                                        <CascadingValue Value="dayMeal">
                                                            <DietPlanMealPartialComponent userId="userId"></DietPlanMealPartialComponent>
                                                        </CascadingValue>
                                                    </span>
                                                </MudCard>

                                            </div>
                                            <br/>
                                        }
                                    </MudCard>
                                    <MudButton
                                        Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add"
                                        @onclick="() => AddMeal()">
                                        Dodaj posiłek
                                    </MudButton>
                                </MudCard>
                            </MudCard>



                        </MudCardContent>
                    </MudCard>

                    <MudCard>
                        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Anuluj</MudButton>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary">Zapisz</MudButton>
                    </MudCard>
                </EditForm>
            </MudItem>



        }
    </div>
</div>
</div>


@code {

    [Parameter]
    public int PatientId { get; set; }
    [Parameter]
    public int DietPlanId { get; set; }
    [Parameter]
    public int DietPlanDayId { get; set; }
    private bool _checkOwner = false;
    private DietPlanDay _dietPlanDay { get; set; }
    private string userId { get; set; }
    private DietPlan _dietPlan { get; set; }

    private List<string> mealList = Enum.GetNames(typeof(MealType)).Cast<string>().ToList();



    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var userId = userManager.GetUserId(user);
        _checkOwner= await iPatientStoresService.CheckOwner(userId, PatientId);
        if (_checkOwner==true)
        {
            _dietPlanDay = await iDietPlanStoresService.GetDietPlanDay(DietPlanDayId);
            _dietPlan = await iDietPlanStoresService.GetDietPlan(DietPlanId);
        }

        await base.OnInitializedAsync();
    }

    private async Task AddMeal()
    {
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
        _dietPlanDay.DietPlanDayMeals.Add(new DayMeal(){CreatedBy = userId, CreatedAt = DateTime.Now});
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
    }

    private void Calculate()
    {
        _dietPlanDay.Calories = 0;
        _dietPlanDay.Fats = 0;
        _dietPlanDay.Carbohydrates = 0;
        _dietPlanDay.Proteins = 0;
        _dietPlanDay.Fiber = 0;
        if (_dietPlanDay.DietPlanDayMeals.Any()&&_dietPlanDay.DietPlanDayMeals.Any(x=>x.MealDish?.Dish!=null))
        {
            
            _dietPlanDay.Calories = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Calories),2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Fats = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fats), 2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Carbohydrates = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Carbohydrates), 2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Proteins = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Proteins), 2 , MidpointRounding.AwayFromZero);
            _dietPlanDay.Fiber = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fiber), 2 , MidpointRounding.AwayFromZero);
            
        }
        //if (_dietPlanDay.DietPlanDayMeals.Count==1)
        //{
        //    _dietPlanDay.Calories = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Calories),2, MidpointRounding.AwayFromZero);
        //    _dietPlanDay.Fats = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fats), 2, MidpointRounding.AwayFromZero);
        //    _dietPlanDay.Carbohydrates = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Carbohydrates), 2, MidpointRounding.AwayFromZero);
        //    _dietPlanDay.Proteins = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Proteins), 2 , MidpointRounding.AwayFromZero);
        //    _dietPlanDay.Fiber = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fiber), 2 , MidpointRounding.AwayFromZero);
        //}


        
        
    }


    private async Task OnValidSubmit()
    {
        foreach (var meal in _dietPlanDay.DietPlanDayMeals)
        {
            await iDietPlanStoresService.UpdateDayMeal(meal);
        }
        var user = httpContextAccessor.HttpContext.User;
        userId = userManager.GetUserId(user);
        _dietPlanDay= await iDietPlanStoresService.GetDietPlanDay(DietPlanDayId);
        _dietPlanDay.ModifiedBy = userId;
        _dietPlanDay.ModifiedAt = DateTime.Now;
        Calculate();

        foreach (var meal in _dietPlanDay.DietPlanDayMeals)
        {
            meal.CreatedAt=DateTime.Now;
            meal.CreatedBy = userId;
            await iDietPlanStoresService.UpdateDayMeal(meal);
        }
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
        Save();
        

    }

    void Cancel()
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/EditDietPlan/{DietPlanId}");
    }

    void Save()
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/EditDietPlan/{DietPlanId}");
    }

}
