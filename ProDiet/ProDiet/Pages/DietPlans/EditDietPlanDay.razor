@page "/patientdetails/{PatientId:int}/EditDietPlan/{DietPlanId:int}/EditDietDay/{DietPlanDayId:int}"

@inject UserManager<IdentityUser> userManager
@inject IDietPlanStoresService iDietPlanStoresService
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.Identity
@using ProDiet.Data.Enums
@using ProDiet.Models.DietPlan
@using ProDiet.Services
@using Microsoft.AspNetCore.Components


@*Edycja dnia jadłospisu-> (dodawanie posiłków) DietPlanMealPartial*@

@if (_dietPlanDay == null)
{
    <p><em>Nie możesz wyświetlić tego planu dietetycznego</em></p>
}
else
{
    <MudItem @onclick="() => Calculate()">
    <h3>Edycja dnia jadłospisu: @_dietPlanDay.DietPlanDayDate</h3>
    <EditForm Model="@_dietPlanDay" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudCard>
                    <MudCard>
                    
                        <MudCard>
                            @for (var i = 0; i < _dietPlanDay.DietPlanDayMeals.Count; i++)
                            {
                                var index = i;
                                var dayMeal = _dietPlanDay.DietPlanDayMeals[i];
                                <div class="row">
                                    <div class="col-10"></div>
                                    <div class="col-2">
                                        <MudButton
                                            Size="Size.Small"
                                            EndIcon="@Icons.Filled.Delete"
                                            Variant="Variant.Filled"
                                            Color="Color.Error"
                                            @onclick="@(() => _dietPlanDay.DietPlanDayMeals.RemoveAt(index))">
                                            Skasuj posiłek
                                        </MudButton>
                                    </div>
                                </div>
                                <MudCard Outlined="true">
                                    <span>
                                        <CascadingValue Value="dayMeal">
                                            <DietPlanMealPartialComponent userId="userId"></DietPlanMealPartialComponent>
                                        </CascadingValue>
                                    </span>
                                </MudCard>
                            
                            }
                        </MudCard>
                        <MudButton
                            Color="Color.Success" Variant="Variant.Filled" StartIcon="@Icons.Filled.Add"
                            @onclick="() => AddMeal()">
                            Dodaj posiłek
                        </MudButton>
                    </MudCard>
                </MudCard>
  
            
                <div class="row">
                    <div class="col-2" align="center">Kaloryka</div>
                    <div class="col-2" align="center">Węglowodany</div>
                    <div class="col-2" align="center">Tłuszcze</div>
                    <div class="col-2" align="center">Białko</div>
                    <div class="col-2" align="center">Błonnik</div>

                </div>

                <div class="row">
                
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlanDay.Calories"
                                      For="@(() => _dietPlanDay.Calories)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyCalories"
                                      For="@(() => _dietPlan.DailyCalories)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlanDay.Carbohydrates"
                                      For="@(() => _dietPlanDay.Carbohydrates)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyCarbohydrates"
                                      For="@(() => _dietPlan.DailyCarbohydrates)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlanDay.Fats"
                                      For="@(() => _dietPlanDay.Fats)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"/>
                                  
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyFats"
                                      For="@(() => _dietPlan.DailyFats)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"/>
                    </div>
                    <div class="col-1">   
                        <MudTextField @bind-Value="_dietPlanDay.Proteins"
                                      For="@(() => _dietPlanDay.Proteins)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">   
                        <MudTextField @bind-Value="_dietPlan.DailyProteins"
                                      For="@(() => _dietPlan.DailyProteins)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlanDay.Fiber"
                                      For="@(() => _dietPlanDay.Fiber)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyFiber"
                                      For="@(() => _dietPlan.DailyFiber)"
                                      Immediate="true"
                                      Disabled="true"
                                      Lines="1"
                        />
                    </div>
                </div>
            </MudCardContent>
        </MudCard>
    
        <MudCard>
            <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Anuluj</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Tertiary">Dodaj</MudButton>
        </MudCard> 
    </EditForm>
    </MudItem>

    

}


@code {

    [Parameter]
    public int PatientId { get; set; }
    [Parameter]
    public int DietPlanId { get; set; }
    [Parameter]
    public int DietPlanDayId { get; set; }
    private bool _checkOwner = false;
    private DietPlanDay _dietPlanDay { get; set; }
    private string userId { get; set; }
    private DietPlan _dietPlan { get; set; }

    private List<string> mealList = Enum.GetNames(typeof(MealType)).Cast<string>().ToList();



    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var userId = userManager.GetUserId(user);
        _checkOwner= await iPatientStoresService.CheckOwner(userId, PatientId);
        if (_checkOwner==true)
        {
            _dietPlanDay = await iDietPlanStoresService.GetDietPlanDay(DietPlanDayId);
            _dietPlan = await iDietPlanStoresService.GetDietPlan(DietPlanId);
        }
        //if (_dietPlanDay.DietPlanDayMeals.Count!=0)
        //{
        //    Calculate();
        //}

        await base.OnInitializedAsync();
    }

    private async Task AddMeal()
    {
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
        //foreach (var meal in _dietPlanDay.DietPlanDayMeals)
        //{
        //    await iDietPlanStoresService.UpdateDayMeal(meal);
        //}
        _dietPlanDay.DietPlanDayMeals.Add(new DayMeal(){CreatedBy = userId, CreatedAt = DateTime.Now});
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
    }

    private async Task Calculate()
    {
        if (_dietPlanDay.DietPlanDayMeals.Count>1)
        {
            _dietPlanDay.Calories = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Calories),2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Fats = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fats), 2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Carbohydrates = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Carbohydrates), 2, MidpointRounding.AwayFromZero);
            _dietPlanDay.Proteins = MathF.Round(_dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Proteins), 2 , MidpointRounding.AwayFromZero);
            _dietPlanDay.Fiber = _dietPlanDay.DietPlanDayMeals.Sum(x => x.MealDish.Fiber); 
        }
        else
        {
            
        }
        
    }


    private async Task OnValidSubmit()
    {
        foreach (var meal in _dietPlanDay.DietPlanDayMeals)
        {
            await iDietPlanStoresService.UpdateDayMeal(meal);
        }
        var user = httpContextAccessor.HttpContext.User;
        userId = userManager.GetUserId(user);
        _dietPlanDay= await iDietPlanStoresService.GetDietPlanDay(DietPlanDayId);
        _dietPlanDay.ModifiedBy = userId;
        _dietPlanDay.ModifiedAt = DateTime.Now;
        Calculate();

        foreach (var meal in _dietPlanDay.DietPlanDayMeals)
        {
            meal.CreatedAt=DateTime.Now;
            meal.CreatedBy = userId;
            await iDietPlanStoresService.UpdateDayMeal(meal);
        }
        await iDietPlanStoresService.UpdateDietPlanDay(_dietPlanDay);
        

    }

    void Cancel()
    {
        
    }

}
