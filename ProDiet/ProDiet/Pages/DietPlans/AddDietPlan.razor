@page "/patientdetails/{PatientId:int}/AddDietPlan"
@using Microsoft.AspNetCore.Identity
@using ProDiet.Models
@using ProDiet.Models.DietPlan
@using ProDiet.Services
@inject UserManager<IdentityUser> userManager
@inject IDietPlanStoresService iDietPlanStoresService
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

<div id="border">
    <MudCard>
    @if (_patient == null)
    {
        <p><em>Nie możesz wyświetlić planów dietetycznych tego pacjenta</em></p>
    }
    else
    {
        <div>
            <h2>Jadłospis dla pacjenta: @_patient.FirstName @_patient.LastName</h2>
            <EditForm Model="_dietPlan" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <h4>Ustawienia jadłospisu</h4>
                <div class="row">
                    <div class="col-3">
                        <MudTextField @bind-Value="_dietPlan.DietPlanName"
                                      For="@(() => _dietPlan.DietPlanName)"
                                      Immediate="true"
                                      Label="Nazwa"/>
                    </div>
                    <div class="col-2">
                        <MudNumericField
                            ValueChanged="(int i) => OnDayCountChanged(i)"
                            T="int"
                            Value="planDaysCount"
                            Label="Liczba dni jadłospisu"
                            Min="1"
                            Max="14"
                            Variant="Variant.Outlined"/>
                    </div>
                </div>
                <p></p>
                <p></p>
                <MudInputLabel>Wybierz datę ważności jadłospisu</MudInputLabel>
                <div class="row">
                    <div class="col-4">
                        <MudDateRangePicker @bind-DateRange="_dateRange"></MudDateRangePicker>
                    </div>
                </div>
                <p></p>
                <p></p>
                <div class="row">
                    <div class="col-2">

                        <MudTextField
                            ValueChanged="(float i) => OnDailyCaloriesChanged(i)"
                            T="float"
                            Value="_dietPlan.DailyCalories"
                            For="@(() => _dietPlan.DailyCalories)"
                            Immediate="true"
                            Label="Planowana liczba kalorii(kcal)"/>
                    </div>
                    <div class="col-2">
                        <MudTextField @bind-Value="_patient.PPM"
                                      For="@(() => _patient.PPM)"
                                      Immediate="true"
                                      Disabled="true"
                                      Label="PPM(kcal)"/>
                    </div>
                    <div class="col-2">

                        <MudTextField @bind-Value="_patient.CPM"
                                      For="@(() => _patient.CPM)"
                                      Immediate="true"
                                      Disabled="true"
                                      Label="CPM(kcal)"/>
                    </div>
                </div>
                <p></p>
                <p></p>


                <MudInputLabel>Udział energii poszczególnych makroskładników(%):</MudInputLabel>
                <div class="row">
                    <div class="col-2" align="center">
                        <h8>Węglowodany</h8>
                    </div>
                    <div class="col-2" align="center">
                        <h8>Białko</h8>
                    </div>
                    <div class="col-2" align="center">
                        <h8>Tłuszcz</h8>
                    </div>
                </div>
                <div class="row">
                    <div class="col-1">
                        <MudNumericField
                            ValueChanged="(int i) => OnPercentChanged(i, 'c')"
                            T="int"
                            Value="carbPercent"
                            Label="%"
                            Min="1"
                            Max=@maxCarbPercent
                            Variant="Variant.Outlined"/>
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyCarbohydrates"
                                      For="@(() => _dietPlan.DailyCarbohydrates)"
                                      Immediate="true"
                                      Disabled="true"
                                      Label="g"/>

                    </div>
                    <div class="col-1">

                        <MudNumericField
                            ValueChanged="(int i) => OnPercentChanged(i, 'p')"
                            T="int"
                            Value="proteinPercent"
                            Label="%"
                            Min="1"
                            Max=@maxProteinPercent
                            Variant="Variant.Outlined"/>
                    </div>
                    <div class="col-1">
                        <MudTextField @bind-Value="_dietPlan.DailyProteins"
                                      For="@(() => _dietPlan.DailyProteins)"
                                      Immediate="true"
                                      Disabled="true"
                                      Label="g"/>
                    </div>
                    <div class="col-1">
                        <MudNumericField
                            ValueChanged="(int i) => OnPercentChanged(i, 'f')"
                            T="int"
                            Value="fatPercent"
                            Label="%"
                            Min="1"
                            Max=@maxFatPercent
                            Variant="Variant.Outlined"/>
                    </div>
                    <div class="col-1">
                        <MudTextField
                            @bind-Value="_dietPlan.DailyFats"
                            For="@(() => _dietPlan.DailyFats)"
                            Immediate="true"
                            Disabled="true"
                            Label="g"/>
                    </div>
                </div>
                <MudTextField @bind-Value="_dietPlan.Recommendations"
                              For="@(() => _dietPlan.Recommendations)"
                              Immediate="true"
                              Lines="4"
                              Label="Zalecenia ogólne"/>
                <MudCard>
                    <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Wyjdź</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Dodaj</MudButton>
                </MudCard>


            </EditForm>
        </div>

    }
    </MudCard>
</div>





@code {
    [Parameter]
    public int PatientId { get; set; }
    
    public Patient _patient { get; set; }
    [Parameter]
    public DietPlan _dietPlan { get; set; }

    private bool _checkOwner = false;
    private string userId{ get; set; }

    static int planDaysCount = 7;
    public int carbPercent = 50;
    public int proteinPercent = 15;
    public int fatPercent = 35;
    public int percentSum = 100;
    public int maxCarbPercent { get; set; }
    public int maxFatPercent { get; set; }
    public int maxProteinPercent { get; set; }

    private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(planDaysCount).Date);

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var userId = userManager.GetUserId(user);
        _checkOwner= await iPatientStoresService.CheckOwner(userId, PatientId);
        if (_checkOwner==true)
        {
            _patient = await iPatientStoresService.GetPatientData(PatientId);
            _dietPlan = new DietPlan() {PatientId = _patient.Id, PlanDaysCount = planDaysCount};

        }        
        
        await base.OnInitializedAsync();
    }
    


    public async Task OnDayCountChanged(int dayCount)
    {
        
        planDaysCount = dayCount;
        _dietPlan.PlanDaysCount = dayCount;
        _dateRange=new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(planDaysCount).Date);
        await this.InvokeAsync(StateHasChanged);
    }

    public async Task OnPercentChanged(int i, char type)
    {
        if (type == 'p')
        {
            proteinPercent = i;
            await CalculateMacroGrams();
        }
        if (type == 'f')
        {
            fatPercent = i;
            await CalculateMacroGrams();
        }
        if (type == 'c')
        {
            carbPercent = i;
            await CalculateMacroGrams();
        }
        await CalculateMaxPercents();
    }

    public async Task OnDailyCaloriesChanged(float i)
    {
        _dietPlan.DailyCalories = i;
        await CalculateMacroGrams();
    }
    public async Task CalculateMacroGrams()
    {
        _dietPlan.DailyProteins = (_dietPlan.DailyCalories * (proteinPercent)/100)/4;
        _dietPlan.DailyProteins = MathF.Round(_dietPlan.DailyProteins, 1);
        _dietPlan.DailyFats = (_dietPlan.DailyCalories * (fatPercent)/100)/9;
        _dietPlan.DailyFats = MathF.Round(_dietPlan.DailyFats, 1);
        _dietPlan.DailyCarbohydrates = (_dietPlan.DailyCalories * (carbPercent)/100)/4;
        _dietPlan.DailyCarbohydrates = MathF.Round(_dietPlan.DailyCarbohydrates, 1);
        await this.InvokeAsync(StateHasChanged);

    }


    

    public async Task CalculateMaxPercents()
    {
        percentSum = carbPercent + fatPercent + proteinPercent;

        if (percentSum < 100)
        {
            maxCarbPercent = 100 - percentSum+carbPercent;
            maxFatPercent = 100 - percentSum+fatPercent;
            maxProteinPercent = 100 - percentSum+proteinPercent;
        }
        
        await this.InvokeAsync(StateHasChanged);
    }

    void Cancel()
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}", true);
    }


    private async void OnValidSubmit()
    {
        var user = httpContextAccessor.HttpContext.User;
        var userId = userManager.GetUserId(user);
        _dietPlan.CreatedBy = userId;
        _dietPlan.CreatedAt = DateTime.Now;
        for (var i = 0; i < _dietPlan.PlanDaysCount; i++)
        {
            _dietPlan.DietPlanDays.Add(new DietPlanDay()
            {
                CreatedAt = DateTime.Now,
                CreatedBy = _dietPlan.CreatedBy,
                DietPlanDayDate = _dietPlan.DietPlanStartTime.Value.AddDays(i)
            });
        }
        await iDietPlanStoresService.AddDietPlan(_dietPlan);
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/EditDietPlan/{_dietPlan.DietPlanId}", true);



    }
}
