@page "/patientsmodal"
@using Microsoft.AspNetCore.Identity
@using ProDiet.Data.Enums
@using ProDiet.Services
@inject UserManager<IdentityUser> userManager;
@inject IPatientStoresService iPatientStoresService;
@inject IHttpContextAccessor httpContextAccessor;




<h3>AddPatientModal</h3>


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Dodawanie nowego pacjenta</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="_patient" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ValidationSummary></ValidationSummary>
                <div class="form-group">
                    <div>
                        <h4>Dane pacjenta</h4>
                        <div class="row">
                            <div class="col-sm-6">
                                <label for="FirstName">Imię</label>
                                <InputText id="FirstName" @bind-Value="_patient.FirstName" placeholder="First name" class="form-control">
                                </InputText>
                            </div>
                            <div class="col-sm-6">
                                <label for="LastName">Nazwisko</label>
                                <InputText id="LastName" @bind-Value="_patient.LastName" placeholder="Last name" class="form-control"></InputText>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <label for="Gender">Płeć</label>
                                <InputSelect id="Gender" @bind-Value="_patient.Gender" placeholder="Gender" class="form-control">
                                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                                    {
                                        <option value="@gender">@gender</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-sm-6">
                                <label for="DateOfBirth">Data urodzenia</label>
                                <InputDate @bind-Value="_patient.BirthDate">
                                </InputDate>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <label for="Email">Adres e-mail</label>
                                <InputText id="Email" @bind-Value="_patient.Email" placeholder="Email" class="form-control"></InputText>
                            </div>
                            <div class="col-sm-6">
                                <label for="PhoneNumber">Numer telefonu</label>
                                <InputText id="PhoneNumber" @bind-Value="_patient.PhoneNumber" placeholder="PhoneNumber" class="form-control"></InputText>
                            </div>
                        </div>
                    </div>
                </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@OnValidSubmit>OK</button>
            </div>
        </div>
    </div>
</div>


@code {

    private ProDiet.Models.Patient _patient;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    //public void ShowModal(RenderFragment content)
    //{
        
    //    IsVisible = true;
			
    //    StateHasChanged();
    //}
    
    protected override void OnInitialized()
    {
        _patient = new ProDiet.Models.Patient();
        base.OnInitialized();
    }

    private Task ModalOk()
    {
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        _patient.CreatedBy = id;
        _patient.CreatedAt = DateTime.Now;
        iPatientStoresService.AddPatient(_patient);
        return OnClose.InvokeAsync(true);
        
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private void OnValidSubmit()
    {        
        
        ModalOk();

    }
   



}
