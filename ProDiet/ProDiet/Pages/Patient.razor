@page "/patients"
@using ProDiet.Services
@using Microsoft.AspNetCore.Components
@using ProDiet.Models
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using ProDiet.Data.Enums
@using ProDiet.Pages.Components
@inject UserManager<IdentityUser> userManager
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager


<button type="button" class="btn btn-primary" data-toggle="modal" @onclick="()=>OpenAddPatientDialog()">
    Dodaj nowego pacjenta
</button>

@if (_patients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Imię</th>
            <th>Nazwisko</th>
            <th>Email</th>
            <th>Numer Telefonu</th>
            <th>Data dodania</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var _patient in _patients)
        {
            <tr>
                <td>@_patient.FirstName</td>
                <td>@_patient.LastName</td>
                <td>@_patient.Email</td>
                <td>@_patient.PhoneNumber</td>
                <td>@_patient.CreatedAt.ToShortDateString()</td>
                <td><button class="btn btn-info">Edytuj</button></td>
                <td><button class="btn btn-danger" @onclick="() => OpenDeleteDialog(_patient)">Skasuj</button></td>
            </tr>
        }
        </tbody>
    </table>
}




@if (DialogAddPatientOpen)
{
    <AddPatientModal  OnClose="@OnDialogAddPatientClose"></AddPatientModal>
}
@if (DeleteDialogOpen)
{
    <DeleteConfirmationModal Title="Czy na pewno chcesz skasować pacjenta?" Patient="patient" OnClose="@OnDeleteDialogClose"></DeleteConfirmationModal>
}



@code
{


    private List<ProDiet.Models.Patient> _patients;
    public bool DialogAddPatientOpen { get; set; }
    public bool DeleteDialogOpen { get; set; }

    public ProDiet.Models.Patient patient { get; set; }

    [Parameter]
    public EventCallback<ProDiet.Models.Patient> OnPatientDeleteCallback { get; set; }


    private async void OnDialogAddPatientClose(bool accepted)
    {
        DialogAddPatientOpen = false;
        StateHasChanged();
        await OnInitializedAsync();
    }

    private void OpenAddPatientDialog()
    {
        DialogAddPatientOpen = true;
        StateHasChanged();
    }

    private async void OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
        OnInitializedAsync();
        navigationManager.NavigateTo("/patients", true);

    }

    private void OpenDeleteDialog(ProDiet.Models.Patient _patient)
    {
        patient = _patient;

        DeleteDialogOpen = true;

        StateHasChanged();
    }








    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        _patients = iPatientStoresService.GetAllUsersPatients(id);
        base.OnInitialized();
    }
    

    

}
