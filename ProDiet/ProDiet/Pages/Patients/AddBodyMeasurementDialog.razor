@using Microsoft.AspNetCore.Identity
@using ProDiet.Models
@using ProDiet.Services
@using System.Threading
@using Microsoft.CodeAnalysis.VisualBasic.Syntax
@inject NavigationManager navigationManager;
@inject UserManager<IdentityUser> userManager;
@inject IPatientStoresService iPatientStoresService;
@inject IHttpContextAccessor httpContextAccessor;



<MudDialog  DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 1700px; max-width: 1700px; overflow-y: scroll ; overflow-x:scroll" >

            <EditForm Model="bodyMeasurement" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <MudCard >
                    <MudCardContent>
                        <MudTextField @bind-Value="bodyMeasurement.BodyWeight"
                                      For="@(() => bodyMeasurement.BodyWeight)"
                                      Immediate="true"
                                      Label="Masa ciała"/>
                        <MudTextField @bind-Value="bodyMeasurement.Height"
                                      For="@(() => bodyMeasurement.Height)"
                                      Immediate="true"
                                      Label="Wzrost"/>
                        <MudTextField @bind-Value="bodyMeasurement.Waist"
                                      For="@(() => bodyMeasurement.Waist)"
                                      Immediate="true"
                                      Label="Obwód talii"/>
                        <MudTextField @bind-Value="bodyMeasurement.Hips"
                                      For="@(() => bodyMeasurement.Hips)"
                                      Immediate="true"
                                      Label="Obwód bioder"/>
                        <MudTextField @bind-Value="bodyMeasurement.TotalBodyFat"
                                      For="@(() => bodyMeasurement.TotalBodyFat)"
                                      Immediate="true"
                                      Label="TBF"/>
                        <MudTextField @bind-Value="bodyMeasurement.TotalBodyWater"
                                      For="@(() => bodyMeasurement.TotalBodyWater)"
                                      Immediate="true"
                                      Label="TBW"/>
                        <MudTextField @bind-Value="bodyMeasurement.TotalBoneMineral"
                                      For="@(() => bodyMeasurement.TotalBoneMineral)"
                                      Immediate="true"
                                      Label="Masa kostna"/>
                        @*<div class="col-sm-6">*@
                        <label for="MeasurementDate">Data pomiaru</label>
                        <InputDate @bind-Value="bodyMeasurement.MeasurementDate">
                        </InputDate>
                        @*</div>*@
        
                    </MudCardContent>
                </MudCard>
                <MudCardActions>
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="demo-form-button">Dodaj</MudButton>
                </MudCardActions> 
            </EditForm>
        </MudContainer>
    </DialogContent>
    
</MudDialog>

@code {

    [Parameter]
    public ProDiet.Models.Patient patient { get; set; }
    //public ProDiet.Models.Patient patient { get; set; }

    //[Parameter]
    //public int patientId { get; set; }

    public BodyMeasurement bodyMeasurement;

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    //public void ShowModal(RenderFragment content)
    //{
    //    StateHasChanged();
    //}

    //private Task ModalOk()
    //{
    //    return OnClose.InvokeAsync(true);

    //}

    //private Task ModalCancel()
    //{
    //    return OnClose.InvokeAsync(false);
    //}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (patient != null)
            {
                bodyMeasurement = new BodyMeasurement();
            }
        }
        catch (Exception e)
        {
            
            throw;
        }



        await base.OnInitializedAsync();
    }


    [CascadingParameter]
    MudDialogInstance mudDialog { get; set; }


    void Submit() => mudDialog.Close(DialogResult.Ok(true));
    void Cancel() => mudDialog.Cancel();

    





    private async Task OnValidSubmit()
    {
        //patient = await iPatientStoresService.GetPatientData(patientId);
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        bodyMeasurement.CreatedBy = id;
        bodyMeasurement.CreatedAt = DateTime.Now;
        patient.Height = bodyMeasurement.Height;
        patient.Weight = bodyMeasurement.BodyWeight;
        patient.ModifiedAt=DateTime.Now;
        patient.ModifiedBy = id;
        patient.BodyMeasurements.Add(bodyMeasurement);
        await iPatientStoresService.UpdatePatient(patient);
        Thread.Sleep(500);
        Submit();
    //await ModalOk();


    }



}
