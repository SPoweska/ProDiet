@page "/patientdetails/{PatientId:int}"

@using ProDiet.Services
@using Microsoft.AspNetCore.Components
@using ProDiet.Models
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using ProDiet.Data.Enums
@using ProDiet.Models.DietPlan
@using ProDiet.Pages.Components
@using ProDiet.Pages.DietPlans
@inject UserManager<IdentityUser> userManager
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager
@inject IDialogService DialogService

<div id="border">
@if (_patient==null)
{
    <p><em>Nie możesz wyświetlić danych tego pacjenta</em></p>
}

else
{
    
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-10">
        <MudTabPanel  Text="Dane pacjenta">
            <MudCardContent>
                <div>
                    <div>
                        <div class="d-inline pa-1 ">Imię:</div>
                        <div class="d-inline pa-1 ">@_patient.FirstName</div>
                    </div>
                    <div>
                        <div class="d-inline pa-1 ">Nazwisko:</div>
                        <div class="d-inline pa-1 ">@_patient.LastName</div>
                    </div>
                    <div>
                        <div class="d-inline pa-1 ">Email:</div>
                        <div class="d-inline pa-1 ">@_patient.Email</div>
                    </div>
                    <div>
                        <div class="d-inline pa-1 ">Numer telefonu:</div>
                        <div class="d-inline pa-1 ">@_patient.PhoneNumber</div>
                    </div>
                    <div>
                        <div class="d-inline pa-1 ">Wzrost:</div>
                        <div class="d-inline pa-1 ">@_patient.Height cm</div>
                    </div>
                    <div>
                        <div class="d-inline pa-1 ">Waga:</div>
                        <div class="d-inline pa-1 ">@_patient.Weight kg</div>
                    </div>
                    <div>
                        <MudButton @onclick="()=>OpenInterview()"  Variant="Variant.Filled" StartIcon="@Icons.Filled.Edit" Color="Color.Info">
                            Edytuj wywiad żywieniowy</MudButton>
                    </div>
                </div>
            </MudCardContent>
        </MudTabPanel>
        <MudTabPanel Text="Pomiary">
            <MudCardContent>
                <MudButton @onclick="()=>OpenDialogBodyMeasurement(_patient)"  Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Tertiary">
                    Dodaj nowy pomiar ciała
                </MudButton>  

                <table class="table">
                    <thead>
                    <tr>
                        <th>Waga ciała</th>
                        <th>Wzrost</th>
                        <th>Obwód talii</th>
                        <th>Obwód bioder</th>
                        <th>TBF</th>
                        <th>TBW</th>
                        <th>TBM</th>
                        <th>Data pomiaru</th>
                        <th>&nbsp;</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var _bodyMeasurement in _patient.BodyMeasurements)
                    {
                        <tr>
                            <td>@_bodyMeasurement.BodyWeight</td>
                            <td>@_bodyMeasurement.Height</td>
                            <td>@_bodyMeasurement.Waist</td>
                            <td>@_bodyMeasurement.Hips</td>
                            <td>@_bodyMeasurement.TotalBodyFat</td>
                            <td>@_bodyMeasurement.TotalBodyWater</td>
                            <td>@_bodyMeasurement.TotalBoneMineral</td>
                            <td>@_bodyMeasurement.MeasurementDate</td>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"  @onclick="()=>DeleteBodyMeasurement(_bodyMeasurement)">Skasuj pomiar</MudButton>

                        </tr>
                    }
                    </tbody>
                </table>
            </MudCardContent>
        </MudTabPanel>
        <MudTabPanel Text="Jadłospisy">
            <MudCardContent>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Add" Color="Color.Tertiary" OnClick="()=>OpenDietPlanCreator()"> Dodaj jadłospis</MudButton>
                <table class="table">
                    <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Kaloryka</th>
                        <th>Liczba dni</th>
                        <th>Data rozpoczęcia</th>
                        <th>Data zakończenia</th>
                        <th>&nbsp;</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var dietPlan in _patient.DietPlans)
                    {
                        <tr @onclick="() => OpenDietPlan(dietPlan.DietPlanId)">
                            <td>@dietPlan.DietPlanName</td>
                            <td>@dietPlan.DailyCalories</td>
                            <td>@dietPlan.PlanDaysCount</td>
                            <td>@dietPlan.DietPlanStartTime</td>
                            <td>@dietPlan.DietPlanEndTime</td>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Edit" Color="Color.Success" OnClick="()=>EditDietPlan(dietPlan)"> Edytuj plan</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="()=>OpenDialogDeleteDietPlan(dietPlan)"> Skasuj plan</MudButton>
                        </tr>
                    }
                    </tbody>
                </table>
            </MudCardContent>
        </MudTabPanel>
    </MudTabs>
}
</div>


@code {
    private ProDiet.Models.Patient _patient { get; set; }

    [Parameter]
    public int PatientId { get; set; }

    private bool _checkOwner = false;



    public void OpenInterview()
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/Interview");
    }

    public async Task OpenDietPlan(int id)
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/DietPlanSummary/{id}");
    }
    
    public void OpenDietPlanCreator()
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/AddDietPlan");
    }
    public void EditDietPlan(DietPlan dietPlan)
    {
        navigationManager.NavigateTo($"/patientdetails/{PatientId}/EditDietPlan/{dietPlan.DietPlanId}");
    }

    private async Task DeleteBodyMeasurement(BodyMeasurement bodyMeasurement)
    {
        _patient.BodyMeasurements.Remove(bodyMeasurement);
        await iPatientStoresService.UpdatePatient(_patient);
    }

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var userId = userManager.GetUserId(user);
        _checkOwner= await iPatientStoresService.CheckOwner(userId, PatientId);
        if (_checkOwner)
        {
            _patient = await iPatientStoresService.GetPatientData(PatientId);
        }
        else
        {
            _patient = null;
        }

        base.OnInitializedAsync();
    }

    private async Task OpenDialogBodyMeasurement( ProDiet.Models.Patient patient)
    {
        var parameters = new DialogParameters { ["patient"]=_patient };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialogBody=DialogService.Show<AddBodyMeasurementDialog>("Dodaj nowy pomiar ciała",parameters, closeOnEscapeKey);
        var resultBody = await dialogBody.Result;
        if (!resultBody.Cancelled)
        {
            await this.InvokeAsync(StateHasChanged);
        }

    }

    private async Task OpenDialogDeleteDietPlan( DietPlan dietPlan)
    {
        var parameters = new DialogParameters { ["dietPlan"]=dietPlan };
        DialogOptions closeOnEscapeKey = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog= DialogService.Show<DeleteDietPlanConfirmation>("title",parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await this.InvokeAsync(StateHasChanged);
        }

    }
    


}
