@page "/patients"
@using ProDiet.Services
@using Microsoft.AspNetCore.Components
@using ProDiet.Models
@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Http;
@using ProDiet.Data.Enums
@using ProDiet.Pages.Components
@inject UserManager<IdentityUser> userManager
@inject IPatientStoresService iPatientStoresService
@inject IHttpContextAccessor httpContextAccessor
@inject NavigationManager navigationManager

<div id="border">
<MudButton Color="Color.Tertiary" 
           Variant="Variant.Filled" 
           StartIcon="@Icons.Material.Filled.Add"
           @onclick="()=>OpenAddPatientDialog()"
> Dodaj nowego pacjenta
    </MudButton>


@if (_patients == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <table class="table">
        <thead>
        <tr>
            <th>Imię</th>
            <th>Nazwisko</th>
            <th>Email</th>
            <th>Numer Telefonu</th>
            <th>Data dodania</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var _patient in _patients)
        {
            <tr>
                <td>@_patient.FirstName</td>
                <td>@_patient.LastName</td>
                <td>@_patient.Email</td>
                <td>@_patient.PhoneNumber</td>
                <td>@_patient.CreatedAt.ToShortDateString()</td>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.Edit" Color="Color.Success" @onclick="@(()=>navigationManager.NavigateTo($"/patientdetails/{_patient.Id}"))"> Wyświetl pacjenta</MudButton>
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="() => OpenDeleteDialog(_patient)">Skasuj pacjenta</MudButton>
                
            </tr>
        }
        </tbody>
    </table>
    
}
</div>



@if (DialogAddPatientOpen)
{
    <AddPatientModal  OnClose="@OnDialogAddPatientClose"></AddPatientModal>
}
@if (DeleteDialogOpen)
{
    <DeleteConfirmationModal Title="Czy na pewno chcesz skasować pacjenta?" Patient="patient" OnClose="@OnDeleteDialogClose"></DeleteConfirmationModal>
}



@code
{


    private List<ProDiet.Models.Patient> _patients;
    //private string userId;
    public bool DialogAddPatientOpen { get; set; }
    public bool DeleteDialogOpen { get; set; }

    public ProDiet.Models.Patient patient { get; set; }



    [Parameter]
    public EventCallback<ProDiet.Models.Patient> OnPatientDeleteCallback { get; set; }


    private async Task OnDialogAddPatientClose(bool accepted)
    {
        DialogAddPatientOpen = false;
        StateHasChanged();
        //await OnInitializedAsync();
        navigationManager.NavigateTo("/patients", true);

    }

    private void OpenAddPatientDialog()
    {
        DialogAddPatientOpen = true;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        StateHasChanged();
        //await OnInitializedAsync();
        navigationManager.NavigateTo("/patients", true);


    }

    private void OpenDeleteDialog(ProDiet.Models.Patient _patient)
    {
        patient = _patient;

        DeleteDialogOpen = true;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        _patients = await iPatientStoresService.GetAllUsersPatients(id);
        await base.OnInitializedAsync();
    }

    

}
