@page "/dish"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Razor.Language.Intermediate
@using ProDiet.Data.Enums
@using ProDiet.Pages.Dishes
@using ProDiet.Services
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components
@using ProDiet.Data.Configuration
@using ProDiet.Migrations
@using ProDiet.Models
@inject UserManager<IdentityUser> userManager;
@inject IDishStoresService iDishStoresService;
@inject IProductStoresService iProductStoresService;
@inject IHttpContextAccessor httpContextAccessor;
@inject NavigationManager navigationManager;

<h3>Utwórz nowe danie</h3>
<EditForm Model="@_dish" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
            <MudCard @onclick="OnProductsListChanged" >
                <MudCardContent>
                    <MudTextField @bind-Value="_dish.DishName"
                                  For="@(() => _dish.DishName)"
                                  Immediate="true"
                                  Label="Nazwa dania"/>
                    
                    <p></p>
                        <h9>Podsumowanie dania</h9>
                        <table class="table table-bordered">
                            <thead>
                            <tr>
                                <th>Kaloryka</th>
                                <th>Węglowodany(g)</th>
                                <th>Tłuszcz(g)</th>
                                <th>Białko(g)</th>
                                <th>Błonnik(g)</th>
                                
                            </tr>
                            </thead>
                            <tbody>
                            <tr>
                                <td>@_dish.Calories</td>
                                <td>@_dish.Carbohydrates</td>
                                <td>@_dish.Fats</td>
                                <td>@_dish.Proteins</td>
                                <td>@_dish.Fiber</td>
                            </tr>
                            </tbody>
                        </table>

                    <h9>Lista składników:</h9>
                    <MudCard>
                        <MudButton
                            Size="Size.Small" Color="Color.Tertiary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add"
                            @onclick="@(() => _dish.UsedProducts.Add(new UsedProduct()))">
                            Dodaj składnik
                        </MudButton>
                        <MudCard>
                            @for (var i = 0; i < _dish.UsedProducts.Count; i++)
                            {
                                var index = i;
                                var usedProduct = _dish.UsedProducts[i];

                                <CascadingValue Value="usedProduct">
                                    <UsedProductComponent productList="_productsList" OnDataChange="@OnProductsListChanged"></UsedProductComponent>
                                </CascadingValue>

                                <MudFab
                                    Size="Size.Small"
                                    StartIcon="@Icons.Filled.Delete"
                                    Color="Color.Error"
                                    @onclick="@(() => _dish.UsedProducts.RemoveAt(index))">
                                    Skasuj
                                </MudFab>
                            }
                        </MudCard>
                    </MudCard>

                    <div class="row">
                    <div class="col-3">
                        <MudTextField @bind-Value="_dish.Servings"
                                      For="@(() => _dish.Servings)"
                                      Immediate="true"
                                      Label="Liczba porcji"/>
                    </div>
                    <div class="col-3">

                        <MudTextField @bind-Value="_dish.PreparationMinutes"
                                      For="@(() => _dish.PreparationMinutes)"
                                      Immediate="true"
                                      Label="Czas przygotowania(minut)"/>
                    </div>
                    </div>
                    <MudTextField @bind-Value="_dish.Recipe"
                                  For="@(() => _dish.Recipe)"
                                  Immediate="true"
                                  Lines="5"
                                  Label="Wskazówki odnośnie przygotowania"/>
                    <MudCard Outlined="true">
                        <MudSelect Label="Typ posiłku" @bind-Value="_dish.MealType">
                            @foreach (var mealType in Enum.GetValues(typeof(MealType)))
                            {
                                <MudSelectItem T="string" Value="@mealType.ToString()">@mealType</MudSelectItem>
                            }
                        </MudSelect>
                    </MudCard>
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Filled.Cancel">Anuluj</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Zapisz</MudButton>
            </MudCard>
</EditForm>

@code {
    private ProDiet.Models.Dish _dish;
    private List<Product> _productsList;




    private void Cancel()
    {
        navigationManager.NavigateTo("/mydishes");
    }

    private void OnProductsListChanged()
    {
        _dish.Proteins = 0;
        _dish.Carbohydrates = 0;
        _dish.Fats = 0;
        _dish.Calories = 0;
        _dish.Calories = MathF.Round(_dish.UsedProducts.Sum(x => x.Calories),2, MidpointRounding.AwayFromZero);
        _dish.Proteins = MathF.Round(_dish.UsedProducts.Sum(x => x.Proteins),2, MidpointRounding.AwayFromZero);
        _dish.Carbohydrates = MathF.Round(_dish.UsedProducts.Sum(x => x.Carbohydrates),2, MidpointRounding.AwayFromZero);
        _dish.Fats = MathF.Round(_dish.UsedProducts.Sum(x => x.Fats),2, MidpointRounding.AwayFromZero);
        

    //foreach (var usedProduct in _dish.UsedProducts)
        //{
        //    _dish.Proteins += (usedProduct.Proteins)/4;
        //    _dish.Proteins = MathF.Round(_dish.Proteins, 1);
        //    _dish.Carbohydrates += ((usedProduct.Carbohydrates * usedProduct.Quantity) / 100)/4;
        //    _dish.Carbohydrates = MathF.Round(_dish.Carbohydrates, 1);
        //    _dish.Fats += ((usedProduct.Fats * usedProduct.Quantity) / 100)/9;
        //    _dish.Fats = MathF.Round(_dish.Fats, 1);

        //}
        //_dish.Calories = (_dish.Carbohydrates * 4) + (_dish.Proteins * 4) + (_dish.Fats * 9);
        //_dish.Calories = MathF.Round(_dish.Calories, 1);

    }

    protected override async Task OnInitializedAsync()
    {
        _dish = new ProDiet.Models.Dish();
        _productsList = await iProductStoresService.GetAllProducts();
        
        await base.OnInitializedAsync();
    }

    //private async Task<Product> SelectedProductDataLoad(int selectedProductId)
    //{
    //    Product selectedProduct = await iProductStoresService.GetProductData(selectedProductId);
    //    return selectedProduct;
    //}

    private async Task OnValidSubmit()
    {
        var user = httpContextAccessor.HttpContext.User;
        var id = userManager.GetUserId(user);
        OnProductsListChanged();
        _dish.CreatedBy = id;
        _dish.CreatedAt = DateTime.Now;
        await iDishStoresService.AddDish(_dish);
        navigationManager.NavigateTo("/mydishes");

    }

}
