@using ProDiet.Models
@using ProDiet.Services
@using System.Security.Cryptography.X509Certificates
@inject IProductStoresService iProductStoresService;

<div id="borderThin">
<MudCard Outlined="true">
    <div class="row">
        <div class="col-8">

            <MudSelect
                ValueChanged="(int i) => OnProductSelected(i)"
                T="int"
                Label="Nazwa produktu"
                Value="usedProduct.ProductId"
                Text="@selectedProduct.ProductName">
                @foreach (var product in productList)
                {
                    <MudSelectItem T="int" Value="@product.ProductId">@product.ProductName</MudSelectItem>

                }
            </MudSelect>

        </div>
        <div class="col-4">

            <MudTextField
                ValueChanged="(int i) => CalculateNutrients(i)"
                T="int"
                Value="usedProduct.Quantity"
                Immediate="true"
                Label="Masa w gramach"/>
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            <MudTextField T="float"
                          @bind-Value="usedProduct.Calories"
                          Disabled="true"
                          Immediate="true"
                          Label="Kaloryka"/>
        </div>
        <div class="col-2">
            <MudTextField T="float"
                          @bind-Value="usedProduct.Carbohydrates"
                          Disabled="true"
                          Immediate="true"
                          Label="Węglowodany"/>
        </div>
        <div class="col-2">
            <MudTextField T="float"
                          @bind-Value="usedProduct.Fats"
                          Disabled="true"
                          Immediate="true"
                          Label="Tłuszcz"/>
        </div>
        <div class="col-2">
            <MudTextField T="float"
                          @bind-Value="usedProduct.Proteins"
                          Immediate="true"
                          Disabled="true"
                          Label="Białko"/>
        </div>
    </div>
</MudCard>
</div>





@code {
    [CascadingParameter]
    public UsedProduct usedProduct { get; set; }
    [Parameter]
    public List<Product> productList { get; set; }

    [Parameter]
    public Action OnDataChange { get; set; }

    public int selectedProductId;

    public Product selectedProduct = new Product();

    protected  override async  Task OnInitializedAsync()
    {
        selectedProductId = usedProduct.ProductId;

        if (selectedProductId!=0)
        {
            Thread.Sleep(500);
            selectedProduct = await iProductStoresService.GetProductData(selectedProductId);
        }

        await this.InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();

    }

    public async Task DataChange()
    {
        OnDataChange?.Invoke();
    }

    public async Task OnProductSelected(int productId)
    {
        selectedProduct = await iProductStoresService.GetProductData(productId);
        usedProduct.ProductId = productId;
         await this.InvokeAsync(StateHasChanged);
    }
    public async Task CalculateNutrients(int quantity)
    {
        usedProduct.Quantity = quantity;
        usedProduct.Carbohydrates =(selectedProduct.Carbohydrates * usedProduct.Quantity) / 100 ;
        usedProduct.Fats = (selectedProduct.Fats * usedProduct.Quantity) / 100;
        usedProduct.Proteins =(selectedProduct.Proteins * usedProduct.Quantity) / 100;
        usedProduct.Fiber =(selectedProduct.Fiber * usedProduct.Quantity) / 100;
        usedProduct.Calories = (selectedProduct.Calories * usedProduct.Quantity) / 100;
        await this.InvokeAsync(StateHasChanged);
        await DataChange();

    }



}
